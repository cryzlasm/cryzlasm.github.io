<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yzlong-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cryzlasm.github.io/"/>
  <updated>2018-02-04T16:40:52.596Z</updated>
  <id>http://cryzlasm.github.io/</id>
  
  <author>
    <name>Yzlong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>未公开API的使用</title>
    <link href="http://cryzlasm.github.io/2018/02/04/%E6%9C%AA%E5%85%AC%E5%BC%80API%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://cryzlasm.github.io/2018/02/04/未公开API的使用/</id>
    <published>2018-02-04T08:54:42.000Z</published>
    <updated>2018-02-04T16:40:52.596Z</updated>
    
    <content type="html"><![CDATA[<p>可以配合<code>WRK</code> 查看微软未公开的API,进行使用,与实现原理和注意事项<br>主要是可以增加开发的驱动程序的<strong>兼容性</strong><br><a id="more"></a></p><hr><h2 id="未公开的API"><a href="#未公开的API" class="headerlink" title="未公开的API"></a>未公开的API</h2><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>PsEnumProcess</code></td><td style="text-align:left">枚举线程  </td></tr><tr><td style="text-align:left"><code>PsLookupPorcessByProcessID</code></td><td style="text-align:left">通过线程ID 获得<code>EProcess</code>   </td></tr><tr><td style="text-align:left"><code>PspCidTable</code></td><td style="text-align:left">所有的进程与线程的表存储位置  </td></tr><tr><td style="text-align:left"><code>PsGetProcessImageFileName</code></td><td style="text-align:left">通过<code>Eprocess</code> 获得<code>FileName</code>  </td></tr><tr><td style="text-align:left"><code>KeStackAttachProcess</code></td><td style="text-align:left">用于切换<code>CR3</code>  </td></tr><tr><td style="text-align:left"><code>KeUnStackAttachProcee</code></td><td style="text-align:left">用于还原CR3</td></tr><tr><td style="text-align:left"><code>MmGetPhysicalAddress</code></td><td style="text-align:left">通过线性地址转换物理地址</td></tr><tr><td style="text-align:left"><code>PsSetLoadImageNotifyRoutine</code></td><td style="text-align:left">每个模块加载之前都会通知回调</td></tr><tr><td style="text-align:left"><code>CmRegisterCallbackEx</code></td><td style="text-align:left">注册表的<code>HOOK</code>回调注册</td></tr></tbody></table><blockquote><p><strong>调用未公开的内核函数的需要注意参考<code>WRK</code>的相关操作</strong><br><strong>比如:引用计数的增加</strong></p></blockquote><hr><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><blockquote><p><code>EProcess</code> 中:  </p><blockquote><p><code>StartAddress</code> 为全局线程创建函数<br><code>Win32StartAddress</code> 为线程的回调函数</p></blockquote><p><code>WinDBG</code>命令: <code>!PTE Addr</code> 查询线性地址的分页数据</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以配合&lt;code&gt;WRK&lt;/code&gt; 查看微软未公开的API,进行使用,与实现原理和注意事项&lt;br&gt;主要是可以增加开发的驱动程序的&lt;strong&gt;兼容性&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Kernel" scheme="http://cryzlasm.github.io/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>强删文件</title>
    <link href="http://cryzlasm.github.io/2017/03/16/%E5%BC%BA%E5%88%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://cryzlasm.github.io/2017/03/16/强删文件/</id>
    <published>2017-03-16T07:00:00.000Z</published>
    <updated>2018-02-04T18:21:12.565Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="结束线程"><a href="#结束线程" class="headerlink" title="结束线程"></a>结束线程</h2><blockquote><ol><li>获取<code>PsTerminateSystemThread</code>地址:<code>MmGetSystemRoutineAddress</code></li><li>搜索<code>E8</code>特征码,获取<code>PspTerminateThreadByPointer</code>地址</li><li><code>PsLookupProcessByProcessId</code> 通过 <code>PID</code>获得<code>EPROCESS</code></li><li>遍历线程</li><li>结束线程</li></ol></blockquote><h2 id="查找指定文件的句柄"><a href="#查找指定文件的句柄" class="headerlink" title="查找指定文件的句柄"></a>查找指定文件的句柄</h2><blockquote><ol><li>遍历所有进程的所有句柄  (EProcess.ObjectTable(_HANDLE_TABLE类型))  </li><li>通过句柄获得对象  (<code>PsLookupProcessByProcessId</code>)</li><li>通过对象获得名称  (<code>ObQueryNameString</code>)</li></ol></blockquote><a id="more"></a><hr><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><table><thead><tr><th style="text-align:left">API名称</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>MmGetSystemRoutineAddress</code></td><td style="text-align:left">获取导出</td></tr><tr><td style="text-align:left"><code>IoThreadToProcess</code></td><td style="text-align:left">通过线程获得<code>Eprocess</code></td></tr><tr><td style="text-align:left"><code>ZwDuplicateObject</code></td><td style="text-align:left">拷贝目标进程句柄到本进程句柄表</td></tr><tr><td style="text-align:left"><code>PspCidTable</code></td><td style="text-align:left">全局进程,线程表</td></tr><tr><td style="text-align:left"><code>KeStackAttachProcess</code></td><td style="text-align:left">切换CR3与句柄表</td></tr><tr><td style="text-align:left"><code>KeUnstackDetachProcess</code></td><td style="text-align:left">还原CR3与句柄表</td></tr><tr><td style="text-align:left"><code>ZwClose</code></td><td style="text-align:left">用于关闭句柄</td></tr><tr><td style="text-align:left"><code>ObQueryNameString</code></td><td style="text-align:left">通过对象查名称</td></tr><tr><td style="text-align:left"><code>ZwQuerySystemInformation</code></td><td style="text-align:left">用于查询系统所有信息(由参数一决定)</td></tr></tbody></table><hr><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><blockquote><p>64位的, 线程回调表,最大为64项  </p><p>防止别人HOOK 结束进程和结束线程, 去WRK 看创建进程和创建线程API的实现,自己手动实现  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;结束线程&quot;&gt;&lt;a href=&quot;#结束线程&quot; class=&quot;headerlink&quot; title=&quot;结束线程&quot;&gt;&lt;/a&gt;结束线程&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;获取&lt;code&gt;PsTerminateSystemThread&lt;/code&gt;地址:&lt;code&gt;MmGetSystemRoutineAddress&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;搜索&lt;code&gt;E8&lt;/code&gt;特征码,获取&lt;code&gt;PspTerminateThreadByPointer&lt;/code&gt;地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PsLookupProcessByProcessId&lt;/code&gt; 通过 &lt;code&gt;PID&lt;/code&gt;获得&lt;code&gt;EPROCESS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;遍历线程&lt;/li&gt;
&lt;li&gt;结束线程&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;查找指定文件的句柄&quot;&gt;&lt;a href=&quot;#查找指定文件的句柄&quot; class=&quot;headerlink&quot; title=&quot;查找指定文件的句柄&quot;&gt;&lt;/a&gt;查找指定文件的句柄&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;遍历所有进程的所有句柄  (EProcess.ObjectTable(_HANDLE_TABLE类型))  &lt;/li&gt;
&lt;li&gt;通过句柄获得对象  (&lt;code&gt;PsLookupProcessByProcessId&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;通过对象获得名称  (&lt;code&gt;ObQueryNameString&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Kernel" scheme="http://cryzlasm.github.io/tags/Kernel/"/>
    
  </entry>
  
</feed>
