<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[未公开API的使用]]></title>
      <url>/2018/02/04/%E6%9C%AA%E5%85%AC%E5%BC%80API%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>可以配合<code>WRK</code> 查看微软未公开的API,进行使用,与实现原理和注意事项<br>主要是可以增加开发的驱动程序的<strong>兼容性</strong><br><a id="more"></a></p>
<hr>
<h2 id="未公开的API"><a href="#未公开的API" class="headerlink" title="未公开的API"></a>未公开的API</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>PsEnumProcess</code></td>
<td style="text-align:left">枚举线程  </td>
</tr>
<tr>
<td style="text-align:left"><code>PsLookupPorcessByProcessID</code></td>
<td style="text-align:left">通过线程ID 获得<code>EProcess</code>   </td>
</tr>
<tr>
<td style="text-align:left"><code>PspCidTable</code></td>
<td style="text-align:left">所有的进程与线程的表存储位置  </td>
</tr>
<tr>
<td style="text-align:left"><code>PsGetProcessImageFileName</code></td>
<td style="text-align:left">通过<code>Eprocess</code> 获得<code>FileName</code>  </td>
</tr>
<tr>
<td style="text-align:left"><code>KeStackAttachProcess</code></td>
<td style="text-align:left">用于切换<code>CR3</code>  </td>
</tr>
<tr>
<td style="text-align:left"><code>KeUnStackAttachProcee</code></td>
<td style="text-align:left">用于还原CR3</td>
</tr>
<tr>
<td style="text-align:left"><code>MmGetPhysicalAddress</code></td>
<td style="text-align:left">通过线性地址转换物理地址</td>
</tr>
<tr>
<td style="text-align:left"><code>PsSetLoadImageNotifyRoutine</code></td>
<td style="text-align:left">每个模块加载之前都会通知回调</td>
</tr>
<tr>
<td style="text-align:left"><code>CmRegisterCallbackEx</code></td>
<td style="text-align:left">注册表的<code>HOOK</code>回调注册</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>调用未公开的内核函数的需要注意参考<code>WRK</code>的相关操作</strong><br><strong>比如:引用计数的增加</strong></p>
</blockquote>
<hr>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><blockquote>
<p><code>EProcess</code> 中:  </p>
<blockquote>
<p><code>StartAddress</code> 为全局线程创建函数<br><code>Win32StartAddress</code> 为线程的回调函数</p>
</blockquote>
<p><code>WinDBG</code>命令: <code>!PTE Addr</code> 查询线性地址的分页数据</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[强删文件]]></title>
      <url>/2017/03/16/%E5%BC%BA%E5%88%A0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="结束线程"><a href="#结束线程" class="headerlink" title="结束线程"></a>结束线程</h2><blockquote>
<ol>
<li>获取<code>PsTerminateSystemThread</code>地址:<code>MmGetSystemRoutineAddress</code></li>
<li>搜索<code>E8</code>特征码,获取<code>PspTerminateThreadByPointer</code>地址</li>
<li><code>PsLookupProcessByProcessId</code> 通过 <code>PID</code>获得<code>EPROCESS</code></li>
<li>遍历线程<a id="more"></a></li>
<li>结束线程</li>
</ol>
</blockquote>
<h2 id="查找指定文件的句柄"><a href="#查找指定文件的句柄" class="headerlink" title="查找指定文件的句柄"></a>查找指定文件的句柄</h2><blockquote>
<ol>
<li>遍历所有进程的所有句柄  (EProcess.ObjectTable(_HANDLE_TABLE类型))  </li>
<li>通过句柄获得对象  (<code>PsLookupProcessByProcessId</code>)</li>
<li>通过对象获得名称  (<code>ObQueryNameString</code>)</li>
</ol>
</blockquote>
<hr>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><table>
<thead>
<tr>
<th style="text-align:left">API名称</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>MmGetSystemRoutineAddress</code></td>
<td style="text-align:left">获取导出</td>
</tr>
<tr>
<td style="text-align:left"><code>IoThreadToProcess</code></td>
<td style="text-align:left">通过线程获得<code>Eprocess</code></td>
</tr>
<tr>
<td style="text-align:left"><code>ZwDuplicateObject</code></td>
<td style="text-align:left">拷贝目标进程句柄到本进程句柄表</td>
</tr>
<tr>
<td style="text-align:left"><code>PspCidTable</code></td>
<td style="text-align:left">全局进程,线程表</td>
</tr>
<tr>
<td style="text-align:left"><code>KeStackAttachProcess</code></td>
<td style="text-align:left">切换CR3与句柄表</td>
</tr>
<tr>
<td style="text-align:left"><code>KeUnstackDetachProcess</code></td>
<td style="text-align:left">还原CR3与句柄表</td>
</tr>
<tr>
<td style="text-align:left"><code>ZwClose</code></td>
<td style="text-align:left">用于关闭句柄</td>
</tr>
<tr>
<td style="text-align:left"><code>ObQueryNameString</code></td>
<td style="text-align:left">通过对象查名称</td>
</tr>
<tr>
<td style="text-align:left"><code>ZwQuerySystemInformation</code></td>
<td style="text-align:left">用于查询系统所有信息(由参数一决定)</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><blockquote>
<p>64位的, 线程回调表,最大为64项  </p>
<p>防止别人HOOK 结束进程和结束线程, 去WRK 看创建进程和创建线程API的实现,自己手动实现  </p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中断]]></title>
      <url>/2017/03/08/%E4%B8%AD%E6%96%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>用<code>int xx</code>调用中断,从 三环 进入 0环操作<br>门用 <code>Iret</code> 操作 进行从 0环 返回 三环  </p>
</blockquote>
<h2 id="中断调用过程"><a href="#中断调用过程" class="headerlink" title="中断调用过程:"></a>中断调用过程:</h2><blockquote>
<p>3环 传入<code>API</code>的下标 -&gt; 调用 <code>int 2E</code> 切换到0环 -&gt;<br>在<code>2E</code>中断中 派发函数 (<code>call FunAry[eax]</code>的形式调用相应的系统API) -&gt;<br>进行API调用之后, 利用<code>iRet</code> 返回三环<br><a id="more"></a></p>
<h2 id="中断调用实现"><a href="#中断调用实现" class="headerlink" title="中断调用实现"></a>中断调用实现</h2><p><code>int</code> 调用中断时, Push 保存 CS,SS, ESP,EIP,EFlags<br><code>IRet</code>返回三环时,Pop 还原 以上寄存器</p>
</blockquote>
<h2 id="常用中断向量号-256项"><a href="#常用中断向量号-256项" class="headerlink" title="常用中断向量号(256项):"></a>常用中断向量号(256项):</h2><p><img src="Normal.png" alt="常用中断"></p>
<h2 id="中段表的利用"><a href="#中段表的利用" class="headerlink" title="中段表的利用"></a>中段表的利用</h2><blockquote>
<p><code>0x2A</code> 项: <code>GetTickCount</code> Hook此函数,可实现全局加速<br><code>0x93</code>项: 键盘的中断,可以获取键盘的扫描码</p>
</blockquote>
<h2 id="中断描述符表格式"><a href="#中断描述符表格式" class="headerlink" title="中断描述符表格式"></a>中断描述符表格式</h2><p><img src="Gate.png" alt="中断描述符表格式"></p>
<blockquote>
<p><code>MSR</code> : <code>rdmsr</code> / <code>wrmsr</code></p>
</blockquote>
<hr>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><blockquote>
<p>在<code>int 2E</code> 处 进行Hook 可以监控整个系统的API 调用</p>
</blockquote>
<h3 id="WinDBG命令"><a href="#WinDBG命令" class="headerlink" title="WinDBG命令:"></a>WinDBG命令:</h3><blockquote>
<p><code>!idt</code> 显示中段表<br><code>!idt -a</code>  显示所有中段表</p>
<p><code>KV</code> 显示栈</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
